<?php
// $Id: nodeformcols.module,v 1.7.2.2 2010/09/25 20:33:58 voxpelli Exp $
define('NODEFORMCOLS_DEFAULT_REGION', 'main');

/**
 * Implementation of hook_theme().
 */
function nodeformcols_theme() {
  return array(
    // This needs to run after node.module's hook_theme(), which we ensure
    // by setting this module's weight to 1 during install.
    'node_form' => array(
      'render element' => 'form',
      'template' => 'node-form',
    ),
    'taxonomy_form_term' => array(
      'render element' => 'form',
      'template' => 'taxonomy-form-term',
    ),
    'nodeformcols_configuration' => array(
      'render element' => 'element',
      'template' => 'nodeformcols-configuration',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function nodeformcols_menu() {
  // TODO move to a hook.
  $types = array();
  $types['node'] = array(
    'entity' => 'node',
    'path' => 'admin/structure/types/manage/%node_type/form',
    'permission' => 'administer content types',
    'type_callback' => 'nodeformcols_detect_node_type',
    'default_form_callback' => '_nodeformcols_get_node_type_form',
  );
  $types['taxonomy_term'] = array(
    'entity' => 'taxonomy_term',
    'path' => 'admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/form',
    'permission' => 'administer taxonomy',
    'type_callback' => 'nodeformcols_detect_taxonomy_type',
    'default_form_callback' => '_nodeformcols_get_vocabulary_form',
  );
  $types['user'] = array(
    'entity' => 'user',
    'path' => 'admin/config/people/accounts/form',
    'permission' => 'administer users',
    'type_callback' => 'nodeformcols_detect_user_type',
    'default_form_callback' => '_nodeformcols_get_user_form',
  );
  // drupal_alter()...

  $items = array();
  foreach ($types as  $type) {
    $args = array('nodeformcols_configuration_form', $type);
    foreach (explode('/', $type['path']) as $k => $i) {
      if (strpos($i, '%') === 0) {
        $args[] = $k;
      }
    }
    $args[] = $k+1; // for variants.

    $items[$type['path']] = array(
      'title' => 'Manage form',
      'page callback' => 'drupal_get_form',
      'page arguments' => $args,
      'access callback' => 'user_access',
      'access arguments' => array($type['permission']),
      'file' => 'nodeformcols.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
  }
  return $items;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function nodeformcols_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Retrieve the supported regions.
 */
function nodeformcols_form_regions() {
  return array(
    'main' => t('Main column'),
    'right' => t('Right'),
    'footer' => t('Footer'),
  );
}

/**
 * Load the placements for the requested entiry/bundle/variant combination.
 * While we're not using the entity or field APIs it's we use the same lingo
 * to refer to the same constructs.
 */
function nodeformscols_field_placements($entity_type, $bundle, $variant = 'default') {
  $default = array();
  if ($variant != 'default') {
    $default = variable_get("nodeformscols_field_placements_{$entity_type}_{$bundle}_default", $default);
  }
  return variable_get("nodeformscols_field_placements_{$entity_type}_{$bundle}_{$variant}", $default);
}


/**
 * Integration with Node, Taxonomy and User follows.
 */

function nodeformcols_detect_node_type($node, $variant = 'default') {
  return array($node->type, $variant);
}

function nodeformcols_detect_taxonomy_type($vocab, $variant = 'default') {
  return array($vocab->machine_name, $variant);
}

function nodeformcols_detect_user_type($variant) {
  return array('user', $variant);
} 

function _nodeformcols_get_node_type_form($type) {
  module_load_include('inc', 'node', 'node.pages');

  global $user;
  $node = new stdClass();
  $node->uid = $user->uid;
  $node->name = isset($user->name) ? $user->name : '';
  $node->type = $type;
  $node->language = '';

  $form_id = $type . '_node_form';
  $form_state= array(
    'build_info' => array('args' => array($node)),
  );
  $form_state += form_state_defaults();
  $form = drupal_retrieve_form($form_id, $form_state);
  drupal_prepare_form($form_id, $form, $form_state);
  drupal_process_form($form_id, $form, $form_state);
  return $form;
}

function _nodeformcols_get_vocabulary_form($type) {
  module_load_include('inc', 'taxonomy', 'taxonomy.admin');
  $vocabulary = taxonomy_vocabulary_machine_name_load($type);

  $form_id = 'taxonomy_form_term';
  $form_state = array(
    'build_info' => array('args' => array(array(), $vocabulary)),
  );
  $form_state += form_state_defaults();
  $form = drupal_retrieve_form($form_id, $form_state, array(), $vocabulary);
  drupal_prepare_form($form_id, $form, $form_state);
  drupal_process_form($form_id, $form, $form_state);
  return $form;
}

function _nodeformcols_get_user_form($type) {
  // TODO
}

/**
 * Implementation of hook_form_alter().
 */
function nodeformcols_form_alter(&$form, $form_state, $form_id) {
  //krumo($form);
  // When does this get called?
  /*
  if (isset($form['#id']) && $form['#id']=='node-form') {
    drupal_alter('nodeformcols_pre_form', $form);
    $variant = isset($form['#nodeformcols_variant']) ? $form['#nodeformcols_variant'] : 'default';
    $placements = nodeformscols_field_placements('node', $form['#node']->type, $variant);
    foreach ($placements as $key => $p) {
      if (isset($p['hidden']) && $p['hidden']) {
        $form[$key]['#access'] = FALSE;
      }
    }
    drupal_alter('nodeformcols_post_form', $form);
  }
  */
}

/**
 * Preprocess function to run ahead of other modules.
 */
function template_preprocess_node_form(&$vars) {
  $form = &$vars['form'];
  $variant = isset($form['#nodeformcols_variant']) ? $form['#nodeformcols_variant'] : 'default';
  $placements = nodeformscols_field_placements('node', $form['#node']->type, $variant);
  _nodeformcols_apply_placements($vars, $placements);
}

// theme for vocab form.
function template_preprocess_taxonomy_form_term(&$vars) {
  $form = &$vars['form'];
  // TODO detect and pass variant.
  $placements = nodeformscols_field_placements('node', $form['#vocabulary']->machine_name, 'default');
  _nodeformcols_apply_placements($vars, $placements);
}

function _nodeformcols_apply_placements(&$aVars, $placements){
  drupal_add_css(drupal_get_path('module', 'nodeformcols') . '/css/nodeformcols.css');

  $default_region = variable_get('nodeformcols_default_region', NODEFORMCOLS_DEFAULT_REGION);
  $form = &$aVars['form'];
  $class = array('node-form', 'clearfix'); // todo remove node class

  $regions = array();
  $has_elements = array();
  $weight = 0;
  foreach (nodeformcols_form_regions() as $name => $title) {
    $regions[$name] = array(
      '#prefix' => '<div class="form-region-' . $name . '">',
      '#suffix' => '</div>',
      '#weight' => $weight,
    );
    $weight++;
  }

  drupal_alter('nodeformcols_pre_placement', $form);

  // Track if new fields should be adjusted above the buttons.
  // TODO: This should be generalized to a way to tell nodeformcols where to place new fields (above below field X).
  $adjust_to_buttons = isset($placements['buttons']['region']) && ($placements['buttons']['region'] == $default_region);

  foreach (element_children($form) as $key) {
    $field = $form[$key];
    if (isset($field['#type']) && in_array($field['#type'], array('value', 'hidden', 'token')) ||
        (isset($field['#access']) && $field['#access'] == FALSE)) {
      continue;
    }

    if (isset($placements[$key])) {
      $p = $placements[$key];

      if (isset($p['weight'])) {
        $field['#weight'] = $p['weight'];
      }
      if (isset($p['collapsed']) && isset($field['#collapsible']) && $field['#collapsible']) {
        $field['#collapsed'] = $p['collapsed'];
      }
      $regions[$p['region']][$key] = $field;
      $has_elements[$p['region']] = TRUE;
      unset($form[$key]);
    }
    else { // Set the default placement for unknown fields
      $regions[$default_region][$key] = $field;
      if ($adjust_to_buttons && $regions[$default_region][$key]['#weight'] >= $placements['buttons']['weight']) {
        $regions[$default_region][$key]['#weight'] = $placements['buttons']['weight'] - .1;
      }
      $has_elements[$default_region] = TRUE;
      unset($form[$key]);
    }
  }

  foreach ($has_elements as $name => $has) {
    if ($has) {
      $class[] = 'node-form-has-region-' . $name; // more node classing to remove.
      $form['nodeformcols_region_' . $name] = $regions[$name];
    }
  }

  $aVars['class'] = join($class, ' ');
}

/**
 * Implementation of hook_node_type_delete().
 */
function nodeformcols_node_type_delete($info) {
  $result = db_select('variable')
    ->condition('name', 'nodeformscols_field_placements_' . $info->old_type . '%', 'LIKE')
    ->fields('variable', array('name'))
    ->execute();
  foreach ($result as $row) {
    variable_del($row->name);
  }
}

/**
 * Implementation of hook_node_type_update().
 */
function nodeformcols_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    $base = 'nodeformscols_field_placements_' . $info->old_type;
    $new_base = 'nodeformscols_field_placements_' . $info->type;
    $result = db_select('variable')
      ->condition('name', $base . '%', 'LIKE')
      ->fields('variable', array('name'))
      ->execute();
    foreach ($result as $row) {
      $value = variable_get($row->name, NULL);
      $new_name = str_replace($base, $new_base, $row->name);
      variable_set($new_name, $value);
      variable_del($row->name);
    }
  }
}
